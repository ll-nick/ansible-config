#!/bin/bash

# update-reminder: A script to run all kinds of updates
#
# Usage:
#   update-reminder [OPTIONS]
#
# Options:
#   --check        Notify if it's been more than REMINDER_DAYS since last update.
#   --yes, -y      Run updates without confirmation prompts.
#
# Description:
#   This script is used to update various components of the system in one go.
#   After running the updates, it records the current time in a file. If the
#   script is run with the --check option, it will notify the user if it has
#   been more than REMINDER_DAYS since the last update.

UPDATE_TIMESTAMP="$HOME/.last_update_time"
REMINDER_DAYS=7
NO_CONFIRM=false
CHECK_REMINDER=false

PEACH="\033[38;2;250;179;135m" # Catppuccin Mocha Peach
BLUE="\033[38;2;116;199;236m"  # Catppuccin Mocha Blue
RESET="\033[0m"

update_reminder() {
    if [ ! -f "$UPDATE_TIMESTAMP" ]; then
        return
    fi

    last_update=$(cat "$UPDATE_TIMESTAMP")
    current_time=$(date +%s)
    elapsed_days=$(((current_time - last_update) / 86400))

    if [ "$elapsed_days" -lt "$REMINDER_DAYS" ]; then
        return
    fi

    notify-send "Update Reminder" \
        "It's been $elapsed_days days since your last update! Consider running 'update-reminder' to stay up to date." \
        --icon=dialog-information
}

print_title() {
    TITLE="

 ██    ██ ██████  ██████   █████  ████████ ███████ ██████  
 ██    ██ ██   ██ ██   ██ ██   ██    ██    ██      ██   ██ 
 ██    ██ ██████  ██   ██ ███████    ██    █████   ██████  
 ██    ██ ██      ██   ██ ██   ██    ██    ██      ██   ██ 
  ██████  ██      ██████  ██   ██    ██    ███████ ██   ██ 

    "
    echo -e "${PEACH}$TITLE${RESET}"
}

print_section() {
    local title="$1"
    echo -e "\n ${BLUE}###############################################${RESET}"
    echo -e " ${BLUE}#${RESET}  \033[1;33m$title\033[0m"
    echo -e " ${BLUE}###############################################${RESET}\n"
}

confirm_step() {
    local prompt_message="$1"
    if [ "$NO_CONFIRM" = false ]; then
        read -rp "$prompt_message (y/N): " response
        case "$response" in
            [yY][eE][sS] | [yY]) return 0 ;;
            *)
                echo "Skipping..."
                return 1
                ;;
        esac
    fi
    return 0
}

update_system() {
    print_section "Updating System Packages 📦"
    if command -v pacman &> /dev/null; then
        if confirm_step "Proceed with update of system packages via pacman?"; then
            sudo pacman -Syu --noconfirm
        fi
    elif command -v apt &> /dev/null; then
        if confirm_step "Proceed with update of system packages via apt?"; then
            sudo apt update && sudo apt upgrade -y
        fi
    else
        echo "No Supported Package Manager Found!"
    fi
}

update_dotfiles() {
    print_section "Updating Dotfiles 🛠️"
    if ! command -v ansible-pull &> /dev/null; then
        echo "⚠️ Ansible-pull not installed - Skipping!"
        return
    fi

    if confirm_step "Update dotfiles via Ansible?"; then
        ansible-pull -U https://github.com/ll-nick/ansible-config.git
    fi
}

update_kitty() {
    print_section "Updating Kitty 🐱"

    KITTY_BIN="$HOME/.local/bin/kitty"

    if [ -f "$KITTY_BIN" ]; then
        if confirm_step "Reinstall/update kitty in user space?"; then
            echo "Running kitty installer..."
            curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin launch=n
        fi
    else
        echo "Kitty not installed in user space — nothing to do."
    fi
}

update_tmux() {
    print_section "Updating Tmux Plugins 🔧"
    if [ ! -d "$HOME/.config/tmux/plugins/tpm" ]; then
        echo "⚠️ Tmux Plugin Manager (TPM) Not Found - Skipping!"
        return
    fi

    if confirm_step "Update Tmux plugins?"; then
        ~/.config/tmux/plugins/tpm/bin/update_plugins all
    fi
}

update_neovim() {
    print_section "Updating Neovim Plugins ✨"
    if ! command -v nvim &> /dev/null; then
        echo "⚠️ Neovim Not Found - Skipping!"
        return
    fi

    if confirm_step "Update Neovim plugins and commmit lazy-lock.json?"; then
        nvim --headless "+Lazy! sync" +qa
        pushd "$HOME/.config/nvim" || return
        git add lazy-lock.json
        git commit -m "Version bump"
        echo -e "\nChanges:"
        git diff --staged
        if confirm_step "Push changes to remote?"; then
            git push
        fi
        popd || return
        return
    fi

    if confirm_step "Restore Neovim plugins from lazy-lock.json?"; then
        nvim --headless "+Lazy! restore" +qa
    fi
}

update_mise() {
    print_section "Updating Mise Packages 📦"

    if ! command -v mise &> /dev/null; then
        echo "⚠️ mise not installed - Skipping!"
        return
    fi

    if confirm_step "Update mise packages?"; then
        mise self-update
        mise upgrade
    fi
}

update_pipx() {
    print_section "Updating pipx Packages 🐍"

    PATH="$HOME/.local/venvs/pipx/bin:$PATH"
    if ! command -v pipx &> /dev/null; then
        echo "⚠️ pipx not installed - Skipping!"
        return
    fi

    if confirm_step "Update all pipx packages?"; then
        pipx upgrade-all
    fi
}

update_flatpak() {
    print_section "Updating Flatpak Packages 📦"

    if ! command -v flatpak &> /dev/null; then
        echo "⚠️ Flatpak not installed - Skipping!"
        return
    fi

    if confirm_step "Update all Flatpak packages?"; then
        flatpak update -y
    fi
}

update_all() {
    print_title

    update_system
    update_dotfiles
    update_kitty
    update_tmux
    update_neovim
    update_mise
    update_pipx
    update_flatpak

    date +%s > "$UPDATE_TIMESTAMP"
    print_section "✅ All Updates Completed!"
}

main() {
    # Parse arguments
    for arg in "$@"; do
        case "$arg" in
            --yes | -y)
                NO_CONFIRM=true
                ;;
            --check)
                CHECK_REMINDER=true
                ;;
        esac
    done

    # Execute respective function based on arguments
    if [ "$CHECK_REMINDER" = true ]; then
        update_reminder
    else
        update_all
    fi
}

main "$@"
